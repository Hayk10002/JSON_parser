Syntax specification of Json used in this project
This is pseudocode

// Type = The name of the parser class
// InputType = type to parse from
// ReturnType = In case of successfull parsing the parsed value
// ErrorType = In case of failed parsing the error
// InfoType = Additional info that will be stored in the parser object after parsing, this 


// Type = parse_types::Char
// InputType = stringstream
// ReturnType = char
// ErrorType = variant<UnexpectedCharacter, ExpectedAChar>
char(func(char)->bool accepted) -> char

// Type = parse_types::String
// InputType = stringstream
// ReturnType = std::string
// ErrorType = variant<UnexpectedCharacter, ExpectedAChar>
// InfoType = std::string (the part that got parsed successfully (if parsing "nuke" and trying to get "null", this info will hold "nu"))
str(string accepted) -> string

// Type = parse_types::UnicodeChar
// InputType = stringstream
// ReturnType = utf8_string
// ErrorType = variant<UnexpectedCharacter, ExpectedAChar>
unicode_char(accepted) -> utf8_string

// Type = parse_types::Seq
// InputType = stringstream
// ReturnType = tuple<...>
// ErrorType = variant<errorType1, errorType2, ...>
// InfoType = tuple<std::optional<Type1>, std::optional<Type2>...> In case of success, fully empty, in case of error, K-th elem has value => this part was successfully parsed and the error occurred later 
seq -> tuple

// Type = parse_types::Or
// InputType = stringstream
// ReturnType = variant<...>
// ErrorType = tuple<errorType1, errorType2, ...>
// InfoType = tuple<std::optional<errorType1>, std::optional<errorType2>, ...> In case of error, fully empty, in case of success, K-th elem has error => this part failed to be parsed and some next element got parsed instead
// Order dependent, will prefer the first variant over the second if both can be parsed
or -> variant

// Type = parse_types::Cycle
// InputType = stringstream
// ReturnType = vector<elem::ReturnType>
// ErrorType = NoError  (because in any case cycle can match to nothing, so it will match always)
// InfoType = variant<elem::ErrorType, separator::ErrorType> (info about what was failed to parse)
cycle(elem separator) -> vector (nothing or elem or elem+separator+elem or elem+separator+elem+separator+elem or ....)
cycle(elem) = cycle(elem nothing)

// Type = parse_types::Nothing
// InputType = stringstream
// ReturnType = std::monospace
// ErrorType = NoError
nothing -> std::monostate


NoError = NonConstructible